### 编程题

1、魔法币

小易准备去魔法王国采购魔法神器,购买魔法神器需要使用魔法币,但是小易现在一枚魔法币都没有,但是小易有两台魔法机器可以通过投入x(x可以为0)个魔法币产生更多的魔法币。

魔法机器1:如果投入x个魔法币,魔法机器会将其变为2x+1个魔法币

魔法机器2:如果投入x个魔法币,魔法机器会将其变为2x+2个魔法币

小易采购魔法神器总共需要n个魔法币,所以小易只能通过两台魔法机器产生恰好n个魔法币,小易需要你帮他设计一个投入方案使他最后恰好拥有n个魔法币。

输入描述:

输入包括一行,包括一个正整数n(1 ≤ n ≤ 10^9),表示小易需要的魔法币数量。

输出描述:

输出一个字符串,每个字符表示该次小易选取投入的魔法机器。其中只包含字符'1'和'2'。

输入例子1:

10

输出例子1:

122

代码：

```java
import java.util.Scanner; 
public class Main {    
    public static void main(String[] args) {        
        Scanner in = new Scanner(System.in);        
        while (in.hasNext()) {            
            int coinCount = in.nextInt();            
            StringBuilder sb = new StringBuilder();            
            while (coinCount > 0) {                
                if (coinCount % 2 == 0) {                    //偶数                    
                    coinCount = (coinCount - 2) / 2;                    
                    sb.append("2");                
                } else {                    //奇数                    
                    coinCount = (coinCount - 1) / 2;                    
                    sb.append("1");                
                }            
            }            
            System.out.println(sb.reverse().toString());        
        }    
    }
}
```



2、相反数

为了得到一个数的"相反数",我们将这个数的数字顺序颠倒,然后再加上原先的数得到"相反数"。例如,为了得到1325的"相反数",首先我们将该数的数字顺序颠倒,我们得到5231,之后再加上原先的数,我们得到5231+1325=6556.如果颠倒之后的数字有前缀零,前缀零将会被忽略。例如n = 100, 颠倒之后是1.

输入描述:

输入包括一个整数n,(1 ≤ n ≤ 10^5)

输出描述:

输出一个整数,表示n的相反数

输入例子1:

1325

输出例子1:

6556

代码：

```java
import java.util.Scanner;
public class Main {    
    public static void main(String[] args) {        
        Scanner sc = new Scanner(System.in);        
        String s = sc.next();        
        System.out.println(Integer.parseInt(new StringBuilder(s).reverse().toString())+Integer.parseInt(s));        
        sc.close();    
    }
}
```



3、字符串碎片

一个由小写字母组成的字符串可以看成一些同一字母的最大碎片组成的。例如,"aaabbaaac"是由下面碎片组成的:'aaa','bb','c'。牛牛现在给定一个字符串,请你帮助计算这个字符串的所有碎片的平均长度是多少。

输入描述:

输入包括一个字符串s,字符串s的长度length(1 ≤ length ≤ 50),s只含小写字母('a'-'z')

输出描述:

输出一个整数,表示所有碎片的平均长度,四舍五入保留两位小数。

如样例所示: s = "aaabbaaac"

所有碎片的平均长度 = (3 + 2 + 3 + 1) / 4 = 2.25

输入例子1:

aaabbaaac

输出例子1:

2.25

代码：

```java
public static void main(String[] args) {    
    Scanner sc = new Scanner(System.in);    
    while (sc.hasNext()) {        
        String s = sc.next();        
        float len = s.length();//总长        
        int count = 1;//个数至少为一个        
        for (int i = 0; i < len - 1; i++) {            
            if (s.charAt(i) != s.charAt(i + 1)) {                
                count++;            
            }        
        }        
        System.out.println(len / count);    
    }
}
```



4、游历魔法王国

魔法王国一共有n个城市,编号为0~n-1号,n个城市之间的道路连接起来恰好构成一棵树。

小易现在在0号城市,每次行动小易会从当前所在的城市走到与其相邻的一个城市,小易最多能行动L次。

如果小易到达过某个城市就视为小易游历过这个城市了,小易现在要制定好的旅游计划使他能游历最多的城市,请你帮他计算一下他最多能游历过多少个城市(注意0号城市已经游历了,游历过的城市不重复计算)。

输入描述:

输入包括两行,第一行包括两个正整数n(2 ≤ n ≤ 50)和L(1 ≤ L ≤ 100),表示城市个数和小易能行动的次数。

第二行包括n-1个整数parent[i](0 ≤ parent[i] ≤ i), 对于每个合法的i(0 ≤ i ≤ n - 2),在(i+1)号城市和parent[i]间有一条道路连接。

输出描述:

输出一个整数,表示小易最多能游历的城市数量。

输入例子1:

5 2

0 1 2 3

输出例子1:

3

代码：

```java
import java.util.Scanner; public class Main{    public static void main(String[] args) {        Scanner scan = new Scanner(System.in);        int n = scan.nextInt(), L = scan.nextInt();        int parent[] = new int[n];        int depth[] = new int[n];        int maxDepth = 0;        for (int i = 1; i < n; i++) {            parent[i] = scan.nextInt();            depth[i] = depth[parent[i]] + 1;            if (depth[i] > maxDepth)                maxDepth = depth[i];        }        scan.close();        int count = 0;        if (maxDepth >= L)            count = L;        else            count = (L - maxDepth) / 2 + maxDepth;        if(count >= n - 1)            count = n - 1;        System.out.println(count + 1);    }}
```



5、重排数列

小易有一个长度为N的正整数数列A = {A[1], A[2], A[3]..., A[N]}。

牛博士给小易出了一个难题:

对数列A进行重新排列,使数列A满足所有的A[i] * A[i + 1](1 ≤ i ≤ N - 1)都是4的倍数。

小易现在需要判断一个数列是否可以重排之后满足牛博士的要求。

输入描述:

输入的第一行为数列的个数t(1 ≤ t ≤ 10),

接下来每两行描述一个数列A,第一行为数列长度n(1 ≤ n ≤ 10^5)

第二行为n个正整数A[i](1 ≤ A[i] ≤ 10^9)

输出描述:

对于每个数列输出一行表示是否可以满足牛博士要求,如果可以输出Yes,否则输出No。

输入例子1:

2

3

1 10 100

4

1 2 3 4

输出例子1:

Yes

No

代码：

```c
#include <stdio.h> 
int n;
int arr[100100]; 
int countMod4, countMod2; 
void read() {    
    countMod4 = 0;    
    countMod2 = 0;    
    scanf("%d", &n);    
    for (int i = 0; i < n; ++i) {        
        scanf("%d", arr + i);        
        if (arr[i] % 4 == 0) {            
            ++countMod4;        
        } else if (arr[i] % 2 == 0) {            
            ++countMod2;        
        }    
    }
} 
void work() {    
    int countOdd = n - countMod4 - countMod2;    
    if ((n == 1 && countMod4) || countMod4 >= countOdd - !countMod2) {        
        puts("Yes");    
    } else {        
        puts("No");    
    }
} 
int main() {    
    int t;    
    scanf("%d", &t);    
    while (t--) {        
        read();        
        work();    
    }    
    return 0;
}
```



6、最长公共子括号序列

一个合法的括号匹配序列被定义为:

\1. 空串""是合法的括号序列

\2. 如果"X"和"Y"是合法的序列,那么"XY"也是一个合法的括号序列

\3. 如果"X"是一个合法的序列,那么"(X)"也是一个合法的括号序列

\4. 每个合法的括号序列都可以由上面的规则生成

例如"", "()", "()()()", "(()())", "(((()))"都是合法的。

从一个字符串S中移除零个或者多个字符得到的序列称为S的子序列。

例如"abcde"的子序列有"abe","","abcde"等。

定义LCS(S,T)为字符串S和字符串T最长公共子序列的长度,即一个最长的序列W既是S的子序列也是T的子序列的长度。

小易给出一个合法的括号匹配序列s,小易希望你能找出具有以下特征的括号序列t:

1、t跟s不同,但是长度相同

2、t也是一个合法的括号匹配序列

3、LCS(s, t)是满足上述两个条件的t中最大的

因为这样的t可能存在多个,小易需要你计算出满足条件的t有多少个。

如样例所示: s = "(())()",跟字符串s长度相同的合法括号匹配序列有:

"()(())", "((()))", "()()()", "(()())",其中LCS( "(())()", "()(())" )为4,其他三个都为5,所以输出3.

输入描述:

输入包括字符串s(4 ≤ |s| ≤ 50,|s|表示字符串长度),保证s是一个合法的括号匹配序列。

输出描述:

输出一个正整数,满足条件的t的个数。

输入例子1:

(())()

输出例子1:

3

代码：

```java
package go.jacob.day911; 
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set; 
/* * 答案参考@郑耀钧 * * 我原本的思路是：先找出某个括号字符串的左右合法的全排序字符串 * 然后用动态规划构造找到最大子串方法LCS，最后做统计 * 不过很遗憾，这个方法超时了。所以参考了@郑耀钧 的解法，如下 * * 根据题意，当且仅当修改距离为 1 时 LCS 最大。 * 很容易证明对于两种基本序列 (()) 和 ()() 都有距离为 1 的合法修改。 * 原本想的是对每个左括号，跟每个右括号替换，判断合法后累计。 * 后来发现会漏掉一些情况，那就暴力得干脆一点，把每个符号插入到任意位置， * 判合法，去重，累计。 */
public class Demo2 {    
    private static Set<String> set = new HashSet<String>();    
    static int count = 0;     
    public static void main(String[] args) {        
        Scanner sc = new Scanner(System.in);        
        String str = sc.next();        
        getSequence(str);        System.out.println(set.size() - 1);        
        sc.close();     
    }     
    private static void getSequence(String str) {        
        for (int i = 0; i < str.length(); i++) {            
            StringBuilder sb = new StringBuilder(str);            
            char c = str.charAt(i);            
            sb.deleteCharAt(i);            
            for (int j = 0; j < str.length(); j++) {                
                sb.insert(j, c);                
                if (isLegal(sb.toString())) {                    
                    set.add(sb.toString());                
                }                
                sb.deleteCharAt(j);            
            }        
        }    
    }     
    private static boolean isLegal(String s) {        
        int left = s.length() / 2, 
        right = s.length() / 2;        
        for (int i = 0; i < s.length(); i++) {            
            if (s.charAt(i) == '(')                
                left--;            
            else                
                right--;            
            if (right < left)                
                return false;        
        }        
        return true;    
    }
}
```



7、合唱

小Q和牛博士合唱一首歌曲,这首歌曲由n个音调组成,每个音调由一个正整数表示。

对于每个音调要么由小Q演唱要么由牛博士演唱,对于一系列音调演唱的难度等于所有相邻音调变化幅度之和, 例如一个音调序列是8, 8, 13, 12, 那么它的难度等于|8 - 8| + |13 - 8| + |12 - 13| = 6(其中||表示绝对值)。

现在要对把这n个音调分配给小Q或牛博士,让他们演唱的难度之和最小,请你算算最小的难度和是多少。

如样例所示: 小Q选择演唱{5, 6}难度为1, 牛博士选择演唱{1, 2, 1}难度为2,难度之和为3,这一个是最小难度和的方案了。

输入描述:

输入包括两行,第一行一个正整数n(1 ≤ n ≤ 2000) 第二行n个整数v[i](1 ≤ v[i] ≤ 10^6), 表示每个音调。

输出描述:

输出一个整数,表示小Q和牛博士演唱最小的难度和是多少。

输入例子1:

5

1 5 6 2 1

输出例子1:

3

代码：

```java
import java.util.Scanner;
public class Main {    
    public static void main(String[] args) {        
        Scanner in = new Scanner(System.in);        
        while (in.hasNext()) {            
            int len = in.nextInt();            
            int[] arr = new int[len];            
            for (int i = 0; i < len; ++i) {                
                arr[i] = in.nextInt();            
            }            
            if (len < 3) {                
                System.out.println("0");            
            } else {                
                int[][] dp = new int[len][len];                
                int[] acc = new int[len];                
                dp[0][0] = 0 - Math.abs(arr[1] - arr[0]);                
                for (int i = 1; i < len; ++i) {                    
                    acc[i] = acc[i - 1] + Math.abs(arr[i] - arr[i - 1]);                    
                    dp[i][i - 1] = acc[i - 1];                    
                    for (int j = 0; j < i - 1; ++j) {                        
                        dp[i][j] = dp[i - 1][j] + acc[i] - acc[i - 1];                        
                        dp[i][i - 1] = Math.min(dp[i][i - 1], dp[i - 1][j] + Math.abs(arr[i] - arr[j]));                    
                    }                
                }                
                int min = Integer.MAX_VALUE;                
                for (int j = 0; j < len - 1; ++j) {                    
                    min = Math.min(min, dp[len - 1][j]);                }                
                System.out.println(min);            
            }        
        }    
    }
}
```



8、射击游戏

小易正在玩一款新出的射击游戏,这个射击游戏在一个二维平面进行,小易在坐标原点(0,0),平面上有n只怪物,每个怪物有所在的坐标(x[i], y[i])。小易进行一次射击会把x轴和y轴上(包含坐标原点)的怪物一次性消灭。

小易是这个游戏的VIP玩家,他拥有两项特权操作:

1、让平面内的所有怪物同时向任意同一方向移动任意同一距离

2、让平面内的所有怪物同时对于小易(0,0)旋转任意同一角度

小易要进行一次射击。小易在进行射击前,可以使用这两项特权操作任意次。

小易想知道在他射击的时候最多可以同时消灭多少只怪物,请你帮帮小易。

如样例所示:

![img](https://uploadfiles.nowcoder.net/images/20170908/906271_1504858526319_5919175DAEBEFEF2DD7B449C60B277DF)

所有点对于坐标原点(0,0)顺时针或者逆时针旋转45°,可以让所有点都在坐标轴上,所以5个怪物都可以消灭。

输入描述:

输入包括三行。

第一行中有一个正整数n(1 ≤ n ≤ 50),表示平面内的怪物数量。

第二行包括n个整数x[i](-1,000,000 ≤ x[i] ≤ 1,000,000),表示每只怪物所在坐标的横坐标,以空格分割。

第二行包括n个整数y[i](-1,000,000 ≤ y[i] ≤ 1,000,000),表示每只怪物所在坐标的纵坐标,以空格分割。

输出描述:

输出一个整数表示小易最多能消灭多少只怪物。

输入例子1:

5

0 -1 1 1 -1

0 -1 -1 1 1



输出例子1:

5

代码：

```java
import java.util.Scanner; 
public class Main {    
    public static void main(String[] args) {        
        Scanner scan = new Scanner(System.in);        
        int n = scan.nextInt();        
        int x[] = new int[n];        
        int y[] = new int[n];        
        for (int i = 0; i < n; i++)            
            x[i] = scan.nextInt();        
        for (int i = 0; i < n; i++)            
            y[i] = scan.nextInt();        
        scan.close();        
        int maxShoot = 0;//在坐标轴上的点        
        if (n < 4)            
            maxShoot = n;       
        for (int i = 0; i < n; i++) {            
            for (int j = i + 1; j < n; j++) {                
                int X1 = x[j] - x[i];                
                int Y1 = y[j] - y[i];                
                for (int k = 0; k < n; k++) {                    
                    if (k == i || k == j)                        
                        continue;                    
                    int count = 3;                    
                    for (int l = 0; l < n; l++) {                        
                        if (l == i || l == j || l == k)                            
                            continue;                        
                        int X2 = x[l] - x[k];                        
                        int Y2 = y[l] - y[k];                        
                        int X3 = x[l] - x[i];                        
                        int Y3 = y[l] - y[i];                        
                        if (X1 * X2 + Y1 * Y2 == 0 || X1 * Y3 == X3 * Y1)                 
                            count++;                    
                    }                    
                    if (count > maxShoot)                        
                        maxShoot = count;                
                }            
            }        
        }        
        System.out.println(maxShoot);    
    }
}
```



